function [NLP_problem_set, NLP_name] = create_NLP_problem_set(OCPEC_problem_set)
%UNTITLED25 Summary of this function goes here
%   Detailed explanation goes here

%% relaxed NLP reformulation
NLP_option_set = {...
    struct('relaxation_problem', 'KKT_based',...
    'KKT_complementarity_relaxation_strategy', 'Scholtes'),...
    struct('relaxation_problem', 'KKT_based',...
    'KKT_complementarity_relaxation_strategy', 'Lin_Fukushima'),...
    struct('relaxation_problem', 'KKT_based',...
    'KKT_complementarity_relaxation_strategy', 'Kadrani'),...
    struct('relaxation_problem', 'gap_constraint_based',...
    'gap_constraint_relaxation_strategy', 'generalized_primal_gap',...
    'penalty_gap_func_auxiliary_variable', 'none'),...    
    struct('relaxation_problem', 'gap_constraint_based',...
    'gap_constraint_relaxation_strategy', 'generalized_primal_gap',...
    'penalty_gap_func_auxiliary_variable', 'L2'),...
    struct('relaxation_problem', 'gap_constraint_based',...
    'gap_constraint_relaxation_strategy', 'generalized_D_gap',...
    'penalty_gap_func_auxiliary_variable', 'none'),...
    struct('relaxation_problem', 'gap_constraint_based',...
    'gap_constraint_relaxation_strategy', 'generalized_D_gap',...
    'penalty_gap_func_auxiliary_variable', 'L2')};
NLP_name = {'KKT (Scholtes)', 'KKT (Lin-Fuku)', 'KKT (Kadrani)', ...
    'Gap (primal)', 'Gap (primal, pen)', 'Gap (D)', 'Gap (D, pen)'};

%%
NLP_problem_set = cell(numel(OCPEC_problem_set), numel(NLP_option_set));
for i = 1 : numel(OCPEC_problem_set)
    for j = 1 : numel(NLP_option_set)
        OCPEC_i = OCPEC_problem_set{i};
        NLP_option_j = NLP_option_set{j};
        NLP_i_j = NLP_Formulation(OCPEC_i, NLP_option_j);
        NLP_problem_set{i, j} = NLP_i_j;
    end
end

end